# Generated by Django 5.2.3 on 2025-06-17 09:34

import django.core.validators
import django.db.models.deletion
import timezone_field.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CelestialEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('event_type', models.CharField(choices=[('moon_phase', 'Moon Phase'), ('eclipse', 'Eclipse'), ('meteor_shower', 'Meteor Shower'), ('planetary_event', 'Planetary Event'), ('sunrise_sunset', 'Sunrise/Sunset'), ('astronomical_twilight', 'Astronomical Twilight'), ('conjunction', 'Conjunction'), ('opposition', 'Opposition')], max_length=50)),
                ('date_time', models.DateTimeField(db_index=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('description', models.TextField()),
                ('magnitude', models.FloatField(blank=True, null=True)),
                ('coordinates', models.JSONField(default=dict, help_text='Sky coordinates from API')),
                ('is_featured', models.BooleanField(default=False)),
                ('importance_level', models.IntegerField(choices=[(1, 'Minor'), (2, 'Significant'), (3, 'Major'), (4, 'Critical')], default=2)),
                ('duration_minutes', models.IntegerField(blank=True, null=True)),
                ('viewing_difficulty', models.CharField(choices=[('easy', 'Easy - Naked Eye'), ('moderate', 'Moderate - Binoculars'), ('difficult', 'Difficult - Telescope Required'), ('expert', 'Expert - Advanced Equipment')], default='easy', max_length=20)),
                ('slug', models.SlugField(blank=True, max_length=250)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
            ],
            options={
                'db_table': 'celestial_events',
                'ordering': ['date_time'],
            },
        ),
        migrations.CreateModel(
            name='NewsletterSubscriber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('subscribed_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Eclipse',
            fields=[
                ('celestialevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astronomical_events.celestialevent')),
                ('eclipse_type', models.CharField(choices=[('solar_total', 'Total Solar Eclipse'), ('solar_partial', 'Partial Solar Eclipse'), ('solar_annular', 'Annular Solar Eclipse'), ('lunar_total', 'Total Lunar Eclipse'), ('lunar_partial', 'Partial Lunar Eclipse'), ('lunar_penumbral', 'Penumbral Lunar Eclipse')], max_length=20)),
                ('obscuration_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('path_coordinates', models.JSONField(default=list, help_text='Path coordinates from API')),
                ('visibility_regions', models.JSONField(default=list, help_text='Where eclipse is visible')),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'eclipse_events',
            },
            bases=('astronomical_events.celestialevent',),
        ),
        migrations.CreateModel(
            name='MeteorShower',
            fields=[
                ('celestialevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astronomical_events.celestialevent')),
                ('zhr', models.FloatField(blank=True, help_text='Zenithal Hourly Rate', null=True)),
                ('peak_date_time', models.DateTimeField(blank=True, null=True)),
                ('radiant_ra', models.FloatField(blank=True, help_text='Radiant Right Ascension (degrees)', null=True)),
                ('radiant_dec', models.FloatField(blank=True, help_text='Radiant Declination (degrees)', null=True)),
                ('duration_days', models.FloatField(blank=True, help_text='Active duration in days', null=True)),
                ('parent_body', models.CharField(blank=True, help_text='Comet or asteroid source', max_length=100)),
                ('velocity_kms', models.FloatField(blank=True, help_text='Meteor velocity in km/s', null=True)),
                ('magnitude_min', models.FloatField(blank=True, help_text='Minimum visible magnitude', null=True)),
                ('magnitude_max', models.FloatField(blank=True, help_text='Maximum visible magnitude', null=True)),
            ],
            options={
                'db_table': 'meteor_shower_events',
            },
            bases=('astronomical_events.celestialevent',),
        ),
        migrations.CreateModel(
            name='MoonPhase',
            fields=[
                ('celestialevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astronomical_events.celestialevent')),
                ('phase', models.CharField(choices=[('new_moon', 'New Moon'), ('waxing_crescent', 'Waxing Crescent'), ('first_quarter', 'First Quarter'), ('waxing_gibbous', 'Waxing Gibbous'), ('full_moon', 'Full Moon'), ('waning_gibbous', 'Waning Gibbous'), ('last_quarter', 'Last Quarter'), ('waning_crescent', 'Waning Crescent')], max_length=20)),
                ('illumination_percentage', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('angular_diameter', models.FloatField(blank=True, null=True)),
                ('distance_km', models.FloatField(blank=True, null=True)),
                ('moon_age_days', models.FloatField(blank=True, help_text='Days since new moon', null=True)),
                ('zodiac_sign', models.CharField(blank=True, max_length=20)),
                ('lunation_number', models.IntegerField(blank=True, null=True)),
                ('is_supermoon', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'moon_phase_events',
            },
            bases=('astronomical_events.celestialevent',),
        ),
        migrations.CreateModel(
            name='PlanetaryEvent',
            fields=[
                ('celestialevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='astronomical_events.celestialevent')),
                ('planet_name', models.CharField(max_length=50)),
                ('constellation', models.CharField(max_length=50)),
                ('apparent_magnitude', models.FloatField()),
                ('angular_diameter', models.FloatField(blank=True, null=True)),
                ('distance_au', models.FloatField(blank=True, null=True)),
                ('phase_percentage', models.FloatField(blank=True, null=True)),
                ('right_ascension', models.FloatField(blank=True, null=True)),
                ('declination', models.FloatField(blank=True, null=True)),
                ('elongation', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'planetary_events',
            },
            bases=('astronomical_events.celestialevent',),
        ),
        migrations.CreateModel(
            name='EventImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255)),
                ('image_url', models.URLField()),
                ('description', models.TextField(blank=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('celestial_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_images', to='astronomical_events.celestialevent')),
            ],
            options={
                'db_table': 'event_images',
            },
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('date', models.DateField(db_index=True)),
                ('country_code', models.CharField(help_text='ISO 3166-1 alpha-3 country code', max_length=3)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=True, help_text='Whether this is a public/national holiday')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'holidays',
                'ordering': ['date'],
                'indexes': [models.Index(fields=['date'], name='holidays_date_c1d23c_idx'), models.Index(fields=['country_code'], name='holidays_country_8bd7e3_idx')],
                'unique_together': {('date', 'country_code')},
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('timezone', timezone_field.fields.TimeZoneField()),
                ('country_code', models.CharField(max_length=3)),
                ('elevation_meters', models.IntegerField(default=0, help_text='Elevation above sea level in meters')),
                ('light_pollution_level', models.IntegerField(default=5, help_text='Bortle scale: 1=excellent dark sky, 9=inner city sky', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(9)])),
            ],
            options={
                'db_table': 'locations',
                'indexes': [models.Index(fields=['latitude', 'longitude'], name='locations_latitud_4052bd_idx')],
            },
        ),
        migrations.AddField(
            model_name='celestialevent',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='astronomical_events.location'),
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(default='dsjd@outlook.com', max_length=254, unique=True)),
                ('event_types', models.JSONField(default=list)),
                ('minimum_importance', models.IntegerField(default=2)),
                ('notification_advance_hours', models.IntegerField(default=24)),
                ('email_enabled', models.BooleanField(default=True)),
                ('frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily', 'Daily Summary'), ('weekly', 'Weekly Summary')], default='daily', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('locations', models.ManyToManyField(blank=True, to='astronomical_events.location')),
            ],
            options={
                'db_table': 'subscriptions',
            },
        ),
        migrations.CreateModel(
            name='VisibilityDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visible', models.BooleanField(default=False)),
                ('rise_time', models.DateTimeField(blank=True, null=True)),
                ('set_time', models.DateTimeField(blank=True, null=True)),
                ('best_viewing_start', models.DateTimeField(blank=True, null=True)),
                ('best_viewing_end', models.DateTimeField(blank=True, null=True)),
                ('weather_conditions', models.CharField(blank=True, max_length=200)),
                ('light_pollution_level', models.IntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('celestial_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visibility_details', to='astronomical_events.celestialevent')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='astronomical_events.location')),
            ],
        ),
        migrations.AddIndex(
            model_name='celestialevent',
            index=models.Index(fields=['date_time', 'event_type'], name='celestial_e_date_ti_8369b1_idx'),
        ),
        migrations.AddIndex(
            model_name='celestialevent',
            index=models.Index(fields=['location', 'date_time'], name='celestial_e_locatio_f579e3_idx'),
        ),
        migrations.AddIndex(
            model_name='celestialevent',
            index=models.Index(fields=['importance_level', 'date_time'], name='celestial_e_importa_1c6b8c_idx'),
        ),
        migrations.AddIndex(
            model_name='celestialevent',
            index=models.Index(fields=['is_featured'], name='celestial_e_is_feat_669933_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='visibilitydetail',
            unique_together={('celestial_event', 'location')},
        ),
    ]
